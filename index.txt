						1) HTML 
ЭТО аббривиатура = язык гипертекстовой разметки
* Браузер читает разметку и показывает понятный для людей вид
* HTML файлы имеют расширение .html или .htm
* Разметка состоит из тегов и у каждого тега есть свои атрибуты 
* Набор тегов вложенных друг в друга - создают (DOM) = иерархичсекое деревоэ
* HTML читается сверху-вниз

А) HTML - теги
* Теги бывают: одинарные и парные
* Одинарный тег: <hr> Одинарный
* Парный тег: <h1> Парный </h1>
* Часто у тегов бывают атрибуты (доп пармаетры для этих тегов)
* Существуют теги с обязательными атрибутами <img src="">
* Теги можно вкладывать друг в друга (такая вложенность и формирует иерархическое дерево)

Б) HTML - типы тегов:
* Блочные (которые занимают все пространство блока и начинаются с новой строки)
* Строчные (Занимают только то пространство, которое им необходимо)

В) HTML - иерархическое дерево :
* <tag1> 
	<tag2>...</tag2>
</tag1>

Тег 1 - родитель Тега 2
Тег 2 - дочерний элемент Тега 1

* При вложенности должны быть отступы для понимания DOM структуры

* Прмиер: 

<!doctype HTML>
<html> 
	<head>
		<meta charset="utf-8">
	</head>
	<body>
		<h1>Заголовок 1ого уровня</h1>
		<p>Текст</p>
	</body>
</html>



						2) CSS 

* Они служат для внешнего оформления HTML - документа (шрифт, цвет, фон и т.д.)
* .css - расширение
* CSS файл состоит из набора селекторов, свойств и значений к ним
&* Дочерние элементы наследуют некоторые свойтсва от родительских 
* css файл читается как и html - свурху вниз
* Некоторые теги имеют оформление по умолочанию(им их дает браузер)

A) CSS - стилизация через class:
* class - глобальный атрибут, который используется для стилизации многих элементов
* <h1 class='title'> Заголовок </h1>
 .title {
	свойство : значение;
	свойство : значение;
 }

 Б) CSS - стилизация  через id:
 * id - глобальный атрибут и уникальный идентификатор элемента
 (может быть лишь один на странице)
 * <h1>Heading</h1>
  .#title {
	свойство : значение;
	свойство : значение;
  }

  В) CSS - стилизация через сам тег:
  * <h1>Heading</h1>
   .h1 {
	свойство : значение;
	свойство : значение;
   }

  Г) CSS - стилизация сразу нескольких элементов:
  * h1,h2,body,p,span {
	свойство : значение;
	свойство : значение;
  }

  Д) CSS - стилизация дочерних элементов:
  * text p {
	свойство : значение;
	свойство : значение;
  }
  * body h1 {
	свойство : значение;
	свойство : значение;
  }

  Е) Наследовние стилей:
  * Дочерние элементы наследуют некоторые стили родительских элементов, если они не были перезаписаны 
  * В основном наследуется стиль оформления текста

   					3) Позиционирование:
  * postion : absolute; - указывает какой элемент будет позиционироватсья относительно родительского элемента
  * postion : fixed; - элемент будет фиксирован на окне видимости(просмотра)
  * postion : relative; - указывает от какого элемента будут позиционироваться дочерние (другие) элементы
  * postion : static; - указан по умолочанию

  * overflow : hidden; - скрывает все то, что вылезает за границы

                    4) Псевдоэлементы:
* :before - плайсит элемент перед объектом
* :after - плайсит элемент после объекта
* :first-line - выделяет первую строку и применяет к ней эти свойства
* :first-letter - приминяет свойства к первой букве этого тега(<p></p>)

                    5) HTML 5 теги:
* header - Для шапки сайта
* main - Для основного контента(содержимого сайта)
* footer - Для нижней части сайта (подвал)
* nav - Для создания навигации сайта
* section - Для создания секции на сайте ( но всегдав секции должен быть заголовок)
* article - Для создания  статьи
* time - Он выставляет дату написания того или иного элемента (в основном для поисковых роботов)
* aside - Тег для создания сайдбара
* address - Для создания контактной информации
* figure - для создания фото с описанием 
* figcaption - Для описания (текста) к фотографии

                6) CSS 3 - свойства :
* border-radius:  0px; - позволяет закруглять углы у элемента
* box-shadow: 0px; - добавляет тень для элемента(text-shadow - для текста)
* box-sizing: border-box; - это свойство отвечает за алгоритм подсчета размеров блока
* opacity - свойство для задания непрозрачности элемента
* resize: none; - свойство которое используется для textarea разрешает или запрещает растягивание поля для ввода текста
* transition: background 0.2s linear; - свойство для изменения плавности срабатывания каких-либо интерактивных фич


                 7) flex:
* flex-box - отвечает за создание структуры сайта
* display: flex;
* justify-content: space-between; - служит для выравнивания элементов в контейнере
* align-items: center; - выравнивает элементы контейнера относительно вертикальной линии
* flex-direction: row; -отвечает за то, как будут вести себя элементы контейнера(меняет ось направления)
* flex-grow: 1; - позволяет ячейкам расти равномерно и занять оставшееся пространство
* order: 1; -меняет порядок поведения (нахождения) элемента 

                8) Селекторы:
* text > p; знак больше - берет прямого потомка элемента(блока)
* :first-child; - псевдокласс, который говорит нам что мы берем первый дочерний жлемент в блоке этого класса 
* :nth-child(№ элемента); - выбирает элемент по номеру в скобках
* :fisrt-of-type; - выбирает элемент именно по типу и не важен его порядок и вложенность
* .class:checked + .anotherclass; - получаем доступ к следующему элементу после первого класса, когда мы его отметили
* [] - дает доступ к элементу с атрибутами

                9) Вес селектора:
* id - самый главный селектор (имеет больший вес);
* Вес селектора со вложенностью - имеет больший вес класса;
* !important - перевес дюбого селектора по весу (перебивает все)
* Атрибут имеет больший вес чем селектор


                10) Единицы измерения css:
* em - относительная единица измерения, которая напрямую зависит от размера шрифта родительского тега(элемента)
* rem -  зависит от размера шрифта html тега (самого главного - коренного)
* vertical-align:top; - выравнивает элемент по определенной оси (горизонт или вертик и топ ботом)
* vh (viewport height) - зона видимости нашего экрана брауера(окно обзора)

                11) Обтекания и видимост:
* float: left; -  прижимается к левому краю и содержимое обтекает справа
* opacity: 100%; - элемент есть физически но не виден
* display: none; - полностью скрывает элемент
* visibility: hidden; - скрывает элемент но отступы остаются
 
                12) Как вставляется видео и аудио формат файлов:
* <video src='путь к видео' controls(кнопки для видео) loop(зациклиннеость) muted(без звука при загрузке) autoplay(автопроигровании при загрузке) preload(загружается во время загрузки сайта) poster='путь к фото' (для превью фото нашего видео)></video>
* <audio src='путь к mp3' controls></audio> 

                13) Адаптивная верстка и медиазапросы:
*  max-width: 800px;  - для адаптации под моб устройства используются свой-ва min / max
*  <meta name="viewport" xontent="width=device-width, initial-scale=1"> - для создания адаптива нужен такой мета тег
*  @media (max-width: 800px) {
  .container {
    background: #eee;
  }
} - работает если ширина экрана 800px или меньше
*  flex-wrap: wrap; - разрешает элементам переноситься на новую строку
*  flex-grow: 1; - разрешает растягиваться на всю доступную ширину (для данного элемента)
*  @media (max-height: 350px) and (orientation: landscape) {
  .flex-item {
    height : 200px;
  }
} - когда 2 условия должны быть выполнены






                       6) GIT :
* GIT - это распределенная система управления версиями
* Позволяет сохранять различные версии проектов
* Быстрый переход между различными версиями проекта
* Откат к предедыщим версиям проекта
* GIT - распределительная система контроля версий
* GitHub - сервис хостинга GIT репозиториев
* cd ~.Desktop - переход в новую папку
* mkdir my-project - создание новой папки
* cd my-project - перехо дв папку
* echo "some text" > file.txt - создание файла с текстом
* ls - список файлов в папке
* cat file.txt - чтение файла
* rm file.txt - удаление файла

* git init - создание нового GIT репозитория
* git status - посмотреть какие фалы готовы для комита
* git add . - подготавливает файлы для сохранения в репозитории (добавляет файл в индекс)
* git commit - сохраняет текущую версию моего проекта (модифицированную)
* git checkout - перейти к определенной версии моего проекта
               F) Типы объектов GIT:
               - blob (файл)
               - tree (папка)
               - commit (коммит)
               - annotated tag (аннотированный тег)
* Каждый объект в GIT имеет уникальный ID (SHA1 ХЭШ)
* Коммит - указатель на дерево
* Ветка - ссылка на коммит
                  
                G) Основные команды GIT:
- git status - отображает текущее состояние Git репозитория (что изменено - добавлено и индекс)
- git add <files> - подготовка файлов перед коммитом / git add . (все файлы)
- git commit -m "<message>" - создание коммита с записью изменений в репозитории
- git log - просмотр всей истории изменений (коммитов) 
- git checkout <commit hash> - переход в определенную версию проекта по хэшу коммита
- git checkout <branch name> - переход в определенную версию проекта по названию ветки

                E) Ветки в GIT :
* git branch <branch name> - создание новой ветки 
* git checkout <branch name> - переключение на указанную ветку
* git checkout -b <branch name> - создание и сразу переход на новую ветку
* git branch - отображает список всех веток   
* git branch -m <new branch name> - переименовавыет указанную ветку
* git branch -d <b name> - удаляет указанную ветку   (текущую нельзя - нужно из нее выйти)

                 K) Слияние веток:
* git merge <feature branch name>

                  L) Git - удаленные репозитории:
* git push - команда которая загружает изменения(локальные) в удаленный репозиторий
* git pull - скачивает изменения с удаленного репозитория на локальный комп(репозиторий)
* git clone <url> - копирование удалленого репозитория в локальный
* origin - имя удаленного репозитория по-умолачинию
* git branch -a = отображает все ветки, даже удаленные (в удаленном репозитории)
* git checkout <branch name> - переход в любую ветку в том числе в удаленном репозитории
* git remote add origin <url> - подключает удаленный репозиторий
* git push -u origin <branch> -загрузка изменений из локальной ветки в удаленную с созданием связи между ними

                   M) Браузер и сеть
* http - протокол 
* .ru - хост
* /index.html - ресурс
                      

                      8) DOM JS:

* Все что написано в фале html - является DOM деревом(формирует его)
* .document - точка входа в DOM
* document.documentElement; - получение HTML объекта со всем его содержимым
* document.head; - элемент head
* const document.body; - элемент body (ПОЛУЧАЕМ)

* bodyElement.firstChild; - первый узел (дочерний)
* bodyElement.lastChild; - последний узел (дочерний)
* bodyElement.childNodes; - получаем все узлы документа (дочерние)
* bodyElement.hasСhildNodes() - для проверки наличия дочерних узлов
* bodyElement.previousSibling; - получаем все предыдущий узел объекта (того же уровня вложенности)
* bodyElement.nextSibling; - получаем все след узел объекта (того же уровня вложенности)
* bodyElement.children; - получаем коллекцию html тегов
* bodyElement.lastElementChild; - последний тег (дочерний элемент)
* bodyElement.firstElementChild; - первый тег (дочерний элемент)
* bodyElement.previousElementSibling; - предыдущий родительский элемент 
* bodyElement.nextElementSibling; - следующий родительский элемент

                       A) Поиск элемента querySelectorAll('css-selector'):
* Он ищет и возвращает  все элементы внутри некого объекта, которые удовлетворяют указанному css селектору
* document.querySelectorAll('li')[0]; - возвращает коллекцию
* document.querySelector('li') - возвращает сам объект
* document.getElementById('id') - находит элемент по id
* document.getElementsByTagName('id'); - возвращает коллекцию
* document.getElementsByClassName('id'); - элемент по классу 
* .closest - ищет ближайщий элемент (родительский)
                        
                      Б) innerHTML:
* дает доступ к содержимому и его изменению любого элемента;
                       
                       В) outerHTML:
* получаем содержимое объекта и сам объект
                      
                      Г) textContent:
* получаем текст объекта без тегов 

                      Д) document.createElement('div'); :
* создает новый элемент (тег)

                       E) textElement.remove();
* полностью удаляет элемент
 
                      
                      9) Изменение классов с помощью js:
* element.className; - получение всех классов объектов
* element.classList.add('active'); - добавляет класс элементу
* element.classList.remove('active'); - убирает класс у элемента
* element.classList.toggle('active'); - добавить класс если его нет, а если есть - то удалить его
* element.classList.contains('active'); - проверка наличия класса, возвращает true/false
* element.style.color = 'red'; - добавляет css свойство данному элементу (html тегу)
* parseInt - получаем только числами (результат)


                        10) Операторы в JS:
* Базовые Операторы
* Операторы сравнения
* Логические операторы   
                       
                        11) Инструкции :
* if() {} -  условие в фигурных выполнится только если условие в круглых вернет true
* else {} - если условие в круглых скобках if ложно то вернется значение из этой иснтрукции 
* else if () - для проверки нескольких условий
* ? - условие в скобках if,  : - условие в скобках else
                          
                        12) Циклы :
* while (условие) {} - код для многократного выполнения; тело цикло - работает
елс иусловие в () === true; true - бежим, false - нет 
* do {} while (); - хотя бы 1 раз выполняется тело цикла
* for (начало; условие; шаг) {} - 
                            
                        13) Функции :
* function имя(параметры) {тело(код)}
* return - конец Функции
* если фунцкия вызывает саму себе - то это рекурсия
* функция без имени == "Функциональное выражение"
* setTimeout(фунцкция, задержка, параметр) - метод, который позволяет вызвать функцию 1 раз через определенный интервал времени
* setInterval(фунцкция, задержка, параметр) - метод который позволяет вызывать функцию через определенный интервал времени
* if (2 > 1){ 
  let message =  function a(){
    console.log('I am')
  }
  }
  a()
                           
                          14) Объекты:
* Object.assign(куда(объект)), что(свой-во #1) - синтаксис для дублирования объекта
* console.log(userInfo?.address?.street); - проверка на наличие того или иного свойтсва в объекте
* in - оператор для проверки наличия свойства в объекте
* цикл for in : for (let key in object) {
  //тело цикла выполняется для каждого свойства объекта
}
* this - метод, который заменяет название текущего объекта 
( обращается к первому родительскому объекту)
* new Function - оператор конструктор
                           
                           15) Числа:
* Math.floor(5.8) //5 - оператор округления в меньшую сторону
* Math.round(5.8) //6 - оператор, который округляет до ближащего целого
* parseInt() - возвращает целое число
* parseFloat() - возвращает число с плавающей точкой
* Math.random() - функция которая возвращает число в диапазоне от 0 до 1
( не включая саму единицу )
* Math.max() - возвращает макс число из аргументов в()
* Math.min() - возвращает мин число из аргументов в()

                           16) String (строки) :
* `${переменная}` - синтаксис строк с интеграцией перменных
* `${функция}` - синтаксис строк с интеграцией функций 
* \n - перенос строки 
* \t - табуляция
* \\ - обратный слеш
* string.length - свойство, которое возвращает длину строки
* text[0] - выводит символ по позиции 
* text[text.length-1] - выводит последний символ строки
* text.toUpperCase() - меняет регистр строки на заглавный
* text.toLowerCase() - меняет регистр строки на нижний
* indexOf('text') -  находит часть строки и выводит ее позицию
* text.includes('часть строки') - более своременное решение
* text.startsWith('часть строки') /false
* text.endsWith('часть строки') /true
* text.slice(1,2) - возвращает часть строки от начала и до конца
                              
                             
                             17) Массивы :
* new Array / [] - создание
* позиции начинаются с нуля; arrayOne[1] - получение элемента
из массива по его индексу
* arrOne.length - выводит длину массива
* .push() - метод, который добавляет элемент в конец массива
* .shift() - метод, который удаляет первый элемент массива
* .pop() - метод, который удаляет последний элемент массива
* .unshift() - метод, который добавляет элементы в начало массива
* delete arr[1] - удаляет значение ( но индекс остается )
* .splice(1, 1) - позволяет удалять элементы массива, заменять их и добавлять
* .slice(1 ,2) - мсетод, который создает новый отдельный массив который 
либо копирует исходный массив либо лишь его часть
* .concat() - метод, который создает дубль массива и позволяет 
его дополнить
* .indexOf()
* .includes()
* .find(item. index, array)
* .findIndex()
* .filter(function(item, ind,arr))
* .sort() - меняет порядок элементов (по алфовиту)
* .reverse() - меняет порядок объектов в массиве на обратный

* .map() - метод вызвает функцию для каждого элемента массива и возвращает новый массив 
с результатами выполнения данной Функции 
* .split() - метод который преобразовывает строку в массив по разделителю
* .join() - метод который преобразовывает   массив в строку по разделителю
* Array.isArray() проверка на тип массив

                                     Б) Циклы массивов:
* for :
 for (let i = 0; i < arr.length; i++) {
   console.log(arr[i]);
 }
 * for of
 let arr = [1,2,3];

 for (let arrI of arr) {
  console.log(arrI) //1 2 3
 } 

 * forEach() -  выполняет функцию для каждого элемента массива
 let arr = [1,2,3]
 arr.forEach(function (i,ind,arr){
  console.log(`${i}`)
 }
 ) 

 * .reduce() / .reduceRight() - метод который проходит по элементам массива
 

                                   18) Размеры, прокрутка и координаты элементов :
* Доступная ширина и высота - область, доступная нам для работы.
* window.innerWidth - вся ширина с полосой прокрутки ( если такая имеется )
* window.innerHeight - вся высота с полосой прокрутки ( если такая имеется )
* window.pageYOffset - получение прокрученных пикселей по оси Y 
* window.pageXOffset - получение прокрученных пикселей по оси X
* window.scrollBy(50) - добавляет по 50 px каждый раз при вызове
* window.scrollTo (0,50) - просто переносит от 0 до 50 и все
* document.elementFromPoint(100,100) - получение элемента по пикселям
 

                                    19) События и обработчики этих событий:
 * event.type - для получения самого События
 * event.target -для поулчения самого элемента 
 * event.target - Для получения элемента на котором произошло событие
 * onclick="text"/function - для html тиега  в атрибуте
 * element.addEventListener(event, handler, options)
 * button.removeEventListener(event, handler, options)
                                      
                                    А) Всплытие и погружение :
 * event.stopPropagation(); - Для пердотвращения всплытия (выкл его)
 * event.preventDefault(); - отмена стандартных действий браузера
                                     
                                     Б) Основные события мыши:
* event.which = 1 - показывает какая кнопка была нажата
* mouseover - когда курсор над элементом
* mouseout - вне 
* mouseenter - принцип тот же но без всплытия
* mouseleave - принцип тот же но без всплытия
* keydown - нажатие клавиши
* keyup - когда клавиша отпущена

                                    20) Формы:
* document.forms - вывод всех форм на стиранице ( коллекция )
* documents.forms.main - получение значения аттрибута main
 
                                    

                                    JS- udemy -повтор:
                                     1) Самое важное в JS:
* Выражения 
* Функции
* Объекты